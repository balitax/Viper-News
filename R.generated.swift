//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `options-outline`.
    static let optionsOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "options-outline")
    /// Image `playButton`.
    static let playButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "playButton")
    
    /// `UIImage(named: "options-outline", bundle: ..., traitCollection: ...)`
    static func optionsOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.optionsOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "playButton", bundle: ..., traitCollection: ...)`
    static func playButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playButton, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `DetailNewsTableViewCell`.
    static let detailNewsTableViewCell = _R.nib._DetailNewsTableViewCell()
    /// Nib `NewsTableViewCell`.
    static let newsTableViewCell = _R.nib._NewsTableViewCell()
    
    /// `UINib(name: "DetailNewsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailNewsTableViewCell) instead")
    static func detailNewsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailNewsTableViewCell)
    }
    
    /// `UINib(name: "NewsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newsTableViewCell) instead")
    static func newsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newsTableViewCell)
    }
    
    static func detailNewsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailNewsTableViewCell? {
      return R.nib.detailNewsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailNewsTableViewCell
    }
    
    static func newsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsTableViewCell? {
      return R.nib.newsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsTableViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `NewsDetail`.
    static let newsDetail = _R.storyboard.newsDetail()
    /// Storyboard `News`.
    static let news = _R.storyboard.news()
    /// Storyboard `Videos`.
    static let videos = _R.storyboard.videos()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "News", bundle: ...)`
    static func news(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.news)
    }
    
    /// `UIStoryboard(name: "NewsDetail", bundle: ...)`
    static func newsDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newsDetail)
    }
    
    /// `UIStoryboard(name: "Videos", bundle: ...)`
    static func videos(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.videos)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _NewsTableViewCell.validate()
    }
    
    struct _DetailNewsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailNewsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailNewsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailNewsTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NewsTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NewsTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "playButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'playButton' is used in nib 'NewsTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try news.validate()
      try newsDetail.validate()
      try videos.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct news: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewsViewController
      
      let bundle = R.hostingBundle
      let name = "News"
      let newsViewController = StoryboardViewControllerResource<NewsViewController>(identifier: "NewsViewController")
      
      func newsViewController(_: Void = ()) -> NewsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.news().newsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsViewController' could not be loaded from storyboard 'News' as 'NewsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct newsDetail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewsDetailViewController
      
      let bundle = R.hostingBundle
      let name = "NewsDetail"
      let newsDetailViewController = StoryboardViewControllerResource<NewsDetailViewController>(identifier: "NewsDetailViewController")
      
      func newsDetailViewController(_: Void = ()) -> NewsDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsDetailViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.newsDetail().newsDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsDetailViewController' could not be loaded from storyboard 'NewsDetail' as 'NewsDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct videos: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = VideosViewController
      
      let bundle = R.hostingBundle
      let name = "Videos"
      let videosViewController = StoryboardViewControllerResource<VideosViewController>(identifier: "VideosViewController")
      
      func videosViewController(_: Void = ()) -> VideosViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: videosViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.videos().videosViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'videosViewController' could not be loaded from storyboard 'Videos' as 'VideosViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
